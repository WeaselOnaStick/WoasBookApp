@page "/"
@implements IDisposable
@rendermode InteractiveServer

@using WoasBookApp.Services.FakeBookGen
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using BlazorBootstrap

@inject IJSRuntime JS



@* Required *@
<MudThemeProvider IsDarkMode="true"/>
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<div class="toolbar">
    <MudSelect Value="@generatorLocale" Label="Locale" Variant="Variant.Outlined" T="string" ValueChanged="(val) => SetGeneratorLocale(val)" Class="LocaleSelector">
        <MudSelectItem Value="@("en")">
            <img src="https://upload.wikimedia.org/wikipedia/en/a/a4/Flag_of_the_United_States.svg" height="14" class="mr-1" /> English
        </MudSelectItem>
        <MudSelectItem Value="@("fr")">
            <img src="https://upload.wikimedia.org/wikipedia/commons/c/c3/Flag_of_France.svg" height="14" class="mr-1" /> Français
        </MudSelectItem>
        <MudSelectItem Value="@("ru")">
            <img src="https://upload.wikimedia.org/wikipedia/en/f/f3/Flag_of_Russia.svg" height="14" class="mr-1" /> Русский
        </MudSelectItem>
        <MudSelectItem Value="@("eo")">
            <img src="https://upload.wikimedia.org/wikipedia/commons/f/f5/Flag_of_Esperanto.svg" height="14" class="mr-1" /> Esperanto
        </MudSelectItem>
    </MudSelect>

    <MudButtonGroup Variant="Variant.Outlined">
        <MudNumericField Label="Seed" T="int" ValueChanged="(val) => SetGeneratorSeed(val)" Value="@userSeed" Variant="Variant.Filled"/>
        <MudButton OnClick="RandomizeSeed"><MudIcon Icon="@Icons.Material.Filled.Shuffle" /></MudButton>
    </MudButtonGroup>

    <MudSlider 
    T="float" ValueChanged="(val) => SetGeneratorLikes(val)" Value="@userLikes"
    Min="0" Max="10" Step="0.1f"
    Variant="Variant.Filled">
        Likes: @userLikes
    </MudSlider>


    <MudNumericField 
    T="float" ValueChanged="(val) => SetGeneratorReviews(val)" Value="@userReviews" 
    Min="0" Max="15" Step="0.1f"
    Variant="Variant.Outlined" class="max-width: 8rem"
    Label="Reviews"
    />
</div>

<div id="books-table">
    <MudDataGrid Items="allBooks" ReadOnly="true" Dense="true">
        <Columns>
            <HierarchyColumn T="Tuple<int, Book>"/>
            <PropertyColumn Title="#" Property="b=> b.Item1" />
            <PropertyColumn Title="ISBN" Property="b => b.Item2.ISBN" />
            <PropertyColumn Title="Title" Property="b => b.Item2.Title" />
            <PropertyColumn Title="Author(s)" Property="b => b.Item2.Author" />
            <PropertyColumn Title="Publisher" Property='b => $"{b.Item2.Publisher}, {b.Item2.Year}"' />

        </Columns>
        <ChildRowContent>
            <div class="book-card-item">
                <div class="book-item-left">
                    <Image Src="@context.Item.Item2.CoverURI" Class="rounded" />
                    <MudChip Color="Color.Secondary" Icon="@Icons.Material.Filled.ThumbUp">@context.Item.Item2.Likes Likes</MudChip>
                </div>
                <div class="book-item-right">
                    <div class="book-info-start">
                        <h2>@context.Item.Item2.Title</h2>
                        <p>Author: @context.Item.Item2.Author - @context.Item.Item2.Year</p>
                        <p>@context.Item.Item2.Genre</p>
                        <p>@context.Item.Item2.Description</p>
                        <p>ISBN: @context.Item.Item2.ISBN</p>
                    </div>
                    <MudExpansionPanels Outlined="true">
                        <MudExpansionPanel Text="Reviews">
                            <MudList ReadOnly="true">
                                @{
                                    foreach (var rev in context.Item.Item2.Reviews)
                                    {
                                        <MudListItem>
                                            <p>@rev.Text</p>
                                            <h5>- @rev.Critic</h5>
                                        </MudListItem>
                                    }
                                }
                            </MudList>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </div>
            </div>
        </ChildRowContent>
    </MudDataGrid>
</div>

@code {
    public int bumpAmount = 10;

    public int userSeed = 0;
    public string generatorLocale;

    public float userLikes = 5;
    public float userReviews = 5;

    public string _displayLocale;

    public List<Tuple<int, Book>> allBooks = new List<Tuple<int, Book>>();

    public BookFaker bookFaker;

    private DotNetObjectReference<Home>? dotNetObj;
    
    protected override void OnInitialized()
    {
        SetGeneratorLocale("en");
        dotNetObj = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender){
            await JS.InvokeVoidAsync("setupScrollListener", dotNetObj);
        }
    }

    public void UpdateGenerator(){
        allBooks.Clear();
        bookFaker = new BookFaker(userSeed, userLikes, userReviews, generatorLocale);
        StateHasChanged();
        AddBooks(30);
    }

    public void SetGeneratorLocale(string locale){
        generatorLocale = locale;
        _displayLocale = DisplayLocalesClass.DisplayLocales[locale];
        UpdateGenerator();
    }

    public void SetGeneratorSeed(int seed){
        userSeed = seed;
        UpdateGenerator();
    }

    public void RandomizeSeed(){
        userSeed = (new Random()).Next();
        UpdateGenerator();
    }

    public void SetGeneratorLikes(float newLikes){
        userLikes = newLikes;
        UpdateGenerator();
    }

    public void SetGeneratorReviews(float newReviews){
        userReviews = (float)Math.Round(newReviews,1);
        UpdateGenerator();
    }

    [JSInvokable]
    public async Task OnHitRockBottom(){
        AddBooks(bumpAmount);
    }

    void AddBooks(int N)
    {
        var newbatch = bookFaker.Generate(N);
        int idx = allBooks.Any() ? allBooks.Max(x => x.Item1) : 1;
        allBooks.AddRange(newbatch.Select((b,i) => Tuple.Create(idx+i,b)));
        Console.WriteLine($"Added {N} more books");
        StateHasChanged();
    }

    public void Dispose() => dotNetObj?.Dispose();
}